// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: check_on_use_message.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CheckOnUseServerClient is the client API for CheckOnUseServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CheckOnUseServerClient interface {
	IsUpToDate(ctx context.Context, in *CheckFileRequest, opts ...grpc.CallOption) (*CheckFileResponse, error)
	PullFile(ctx context.Context, in *PullFileRequest, opts ...grpc.CallOption) (*PullFileResponse, error)
}

type checkOnUseServerClient struct {
	cc grpc.ClientConnInterface
}

func NewCheckOnUseServerClient(cc grpc.ClientConnInterface) CheckOnUseServerClient {
	return &checkOnUseServerClient{cc}
}

func (c *checkOnUseServerClient) IsUpToDate(ctx context.Context, in *CheckFileRequest, opts ...grpc.CallOption) (*CheckFileResponse, error) {
	out := new(CheckFileResponse)
	err := c.cc.Invoke(ctx, "/CheckOnUseServer/isUpToDate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkOnUseServerClient) PullFile(ctx context.Context, in *PullFileRequest, opts ...grpc.CallOption) (*PullFileResponse, error) {
	out := new(PullFileResponse)
	err := c.cc.Invoke(ctx, "/CheckOnUseServer/pullFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CheckOnUseServerServer is the server API for CheckOnUseServer service.
// All implementations must embed UnimplementedCheckOnUseServerServer
// for forward compatibility
type CheckOnUseServerServer interface {
	IsUpToDate(context.Context, *CheckFileRequest) (*CheckFileResponse, error)
	PullFile(context.Context, *PullFileRequest) (*PullFileResponse, error)
	mustEmbedUnimplementedCheckOnUseServerServer()
}

// UnimplementedCheckOnUseServerServer must be embedded to have forward compatible implementations.
type UnimplementedCheckOnUseServerServer struct {
}

func (UnimplementedCheckOnUseServerServer) IsUpToDate(context.Context, *CheckFileRequest) (*CheckFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsUpToDate not implemented")
}
func (UnimplementedCheckOnUseServerServer) PullFile(context.Context, *PullFileRequest) (*PullFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullFile not implemented")
}
func (UnimplementedCheckOnUseServerServer) mustEmbedUnimplementedCheckOnUseServerServer() {}

// UnsafeCheckOnUseServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CheckOnUseServerServer will
// result in compilation errors.
type UnsafeCheckOnUseServerServer interface {
	mustEmbedUnimplementedCheckOnUseServerServer()
}

func RegisterCheckOnUseServerServer(s grpc.ServiceRegistrar, srv CheckOnUseServerServer) {
	s.RegisterService(&CheckOnUseServer_ServiceDesc, srv)
}

func _CheckOnUseServer_IsUpToDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckOnUseServerServer).IsUpToDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CheckOnUseServer/isUpToDate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckOnUseServerServer).IsUpToDate(ctx, req.(*CheckFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CheckOnUseServer_PullFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckOnUseServerServer).PullFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CheckOnUseServer/pullFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckOnUseServerServer).PullFile(ctx, req.(*PullFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CheckOnUseServer_ServiceDesc is the grpc.ServiceDesc for CheckOnUseServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CheckOnUseServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CheckOnUseServer",
	HandlerType: (*CheckOnUseServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "isUpToDate",
			Handler:    _CheckOnUseServer_IsUpToDate_Handler,
		},
		{
			MethodName: "pullFile",
			Handler:    _CheckOnUseServer_PullFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "check_on_use_message.proto",
}
